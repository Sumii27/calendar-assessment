import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
const initialState = {
  loading: '',
  slots: [],
  error: '',
};

export const getSlots = createAsyncThunk('user/getSlots', async (values) => {
  const response = await axios.get(
    `https://app.appointo.me/scripttag/mock_timeslots?start_date=${values?.startDate}&end_date=${values?.endDate}`
  );
  // The value we return becomes the `fulfilled` action payload adding an extra flag in the existing array
  const mappedData = response.data[0].slots?.map((item) => ({
    ...item,
    flag: false,
  }));
  return mappedData;
});

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getSlots.pending, (state) => {
      state.loading = true;
    });
    builder.addCase(getSlots.fulfilled, (state, action) => {
      state.loading = false;
      state.slots = action.payload;
      state.error = '';
    });
    builder.addCase(getSlots.rejected, (state, action) => {
      state.loading = false;
      state.error = action.error.message;
    });
  },
});

export const slotsValue = (state) => state.user;
export default userSlice.reducer;
